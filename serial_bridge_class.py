import serial
import threading
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BAUDRATE = 9600
TIMEOUT = 0.01  # –ê–≥—Ä–µ—Å–∏–≤–Ω–æ —á–µ—Ç–µ–Ω–µ —Å –º–∞–ª—ä–∫ timeout

class SerialBridge:
    def __init__(self, real_port, virt_port, comm):
        self.comm = comm
        self.real_port = real_port
        self.virt_port = virt_port
        self.running = True

        self.send_buffer = b''  # –°—ä–¥—ä—Ä–∂–∞ –ø–æ—Å–ª–µ–¥–Ω–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∏—Ç–µ –±–∞–π—Ç–æ–≤–µ (–∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –µ—Ö–æ)

        self.comm.status_signal.emit("–°–≤—ä—Ä–∑–∞–Ω")
        self.comm.baudrate_signal.emit(str(BAUDRATE))
        self.comm.log_signal.emit("‚úÖ –ë—Ä–∏–¥–∂—ä—Ç –º–µ–∂–¥—É –ø–æ—Ä—Ç–æ–≤–µ—Ç–µ –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω")

        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∏—à–∫–∏ –∑–∞ –¥–≤—É–ø–æ—Å–æ—á–Ω–∞ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è
        self.t1 = threading.Thread(target=self.forward_r_to_v, daemon=True)
        self.t2 = threading.Thread(target=self.forward_v_to_r, daemon=True)
        self.t1.start()
        self.t2.start()

    def forward_r_to_v(self):
        """–ü—Ä–µ—Ö–≤—ä—Ä–ª—è –¥–∞–Ω–Ω–∏ –æ—Ç —Ä–µ–∞–ª–µ–Ω –∫—ä–º –≤–∏—Ä—Ç—É–∞–ª–µ–Ω –ø–æ—Ä—Ç, –∫–∞—Ç–æ –ø—Ä–µ–º–∞—Ö–≤–∞ –µ—Ö–æ—Ç–æ."""
        while self.running:
            try:
                data = self.real_port.read(1)
                if data:
                    # –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –µ—Ö–æ ‚Äì –∞–∫–æ –ø–æ–ª—É—á–µ–Ω –±–∞–π—Ç —Å—ä–≤–ø–∞–¥–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω –∫—ä–º —Ä–µ–∞–ª–µ–Ω –ø–æ—Ä—Ç
                    if self.send_buffer.startswith(data):
                        self.send_buffer = self.send_buffer[1:]  # –ü—Ä–µ–º–∞—Ö–≤–∞ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ—Ç–æ –æ—Ç –±—É—Ñ–µ—Ä–∞
                        continue  # –ù–µ –≥–æ –ø—Ä–µ–ø—Ä–∞—â–∞–π ‚Äì —Å—á–∏—Ç–∞–º–µ –≥–æ –∑–∞ –µ—Ö–æ

                    # –í–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏ ‚Äì –ø—Ä–µ–ø—Ä–∞—Ç–∏ –≥–∏
                    self.virt_port.write(data)
                    self.virt_port.flush()
                    self.comm.log_signal.emit(f"[R‚ÜíV] {data.hex(' ')}")
            except Exception as e:
                self.comm.log_signal.emit(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ R‚ÜíV: {e}")
                break

    def forward_v_to_r(self):
        """–ü—Ä–µ—Ö–≤—ä—Ä–ª—è –¥–∞–Ω–Ω–∏ –æ—Ç –≤–∏—Ä—Ç—É–∞–ª–µ–Ω –∫—ä–º —Ä–µ–∞–ª–µ–Ω –ø–æ—Ä—Ç –∏ –ø–∞–∑–∏ –±—É—Ñ–µ—Ä –∑–∞ –µ—Ö–æ-—Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ."""
        while self.running:
            try:
                data = self.virt_port.read(1)
                if data:
                    self.send_buffer += data  # –ë—É—Ñ–µ—Ä–∏—Ä–∞–π –∏–∑–ø—Ä–∞—Ç–µ–Ω–∏—è –±–∞–π—Ç
                    self.real_port.write(data)
                    self.real_port.flush()
                    self.comm.log_signal.emit(f"[V‚ÜíR] {data.hex(' ')}")
            except Exception as e:
                self.comm.log_signal.emit(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ V‚ÜíR: {e}")
                break

    def stop(self):
        """–°–ø–∏—Ä–∞ –±—Ä–∏–¥–∂–∞ –∏ –∑–∞—Ç–≤–∞—Ä—è –ø–æ—Ä—Ç–æ–≤–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ."""
        self.running = False
        try:
            if self.real_port and self.real_port.is_open:
                self.real_port.close()
            if self.virt_port and self.virt_port.is_open:
                self.virt_port.close()
            self.comm.log_signal.emit("üõë –ë—Ä–∏–¥–∂—ä—Ç –µ —Å–ø—Ä—è–Ω –∏ –ø–æ—Ä—Ç–æ–≤–µ—Ç–µ —Å–∞ –∑–∞—Ç–≤–æ—Ä–µ–Ω–∏.")
        except Exception as e:
            self.comm.log_signal.emit(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ: {e}")
